// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  avatar      String?
  avatarFile  Bytes?
  usingAvatar Boolean @default(false)
  salt        String
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contestants Contestant[]
}

model Session {
  id          String   @id @default(cuid())
  uid         String   @unique
  mail        String    @default("")
  name        String    @default("")
  token       String
  refresh     String
}

// Accountant

model Account {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  name        String
  type        AccountType

  journals    Journal[]
}

model Transaction {
  id          Int       @id @default(autoincrement())
  date        DateTime
  description String

  eventId     String
  event       Event     @relation(fields: [eventId], references: [id])

  journal     Journal[]
}

model Journal {
  id            Int     @id @default(autoincrement())
  transactionId Int
  accountId     Int
  debit         Int     @default(0)
  credit        Int     @default(0)

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  account       Account     @relation(fields: [accountId], references: [id])
}

model Asset {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  name        String
  category    String
  location    String
  acquiredAt  DateTime
  value       Int
  condition   String
  status      String
  pic         String?
  notes       String?

  eventId     String
  event       Event     @relation(fields: [eventId], references: [id])

  ledgerEntries AssetLedger[]
}

model AssetLedger {
  id        Int      @id @default(autoincrement())
  assetId   Int
  date      DateTime
  action    String
  value     Int?
  location  String?
  pic       String?
  notes     String?

  asset     Asset    @relation(fields: [assetId], references: [id])
}

// Donors
model Donor {
  id        Int       @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  address   String?
  notes     String?

  donations Donation[]
}

model Donation {
  id          Int       @id @default(autoincrement())
  donorId     Int
  eventId     String
  amount      Int
  date        DateTime  @default(now())
  notes       String?

  donor       Donor     @relation(fields: [donorId], references: [id])
  event       Event     @relation(fields: [eventId], references: [id])
}

// Event

model Event {
  id            String           @id @default(cuid())
  name          String
  description   String
  rules         Json
  startDate     DateTime
  endDate       DateTime?
  logo          Bytes?
  eventLogoUrl  String?
  location      String?
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  showInWeb     Boolean          @default(false)

  tournaments Tournaments[]
  sponsorWeb  SponsorInWeb[]

  // Relasi
  assets        Asset[]
  transactions  Transaction[]
  donation      Donation[]
}

model SponsorInWeb {
  id            String           @id @default(cuid())
  name          String

  eventId   String
  event     Event?   @relation(fields: [eventId], references: [id])
}

model Tournaments {
  id              String           @id @default(cuid())
  name            String
  description     String
  prize           Json
  startDate       DateTime
  endDate         DateTime?
  status          TournamentStatus @default(UPCOMING)
  maxParticipants Int?
  usingLogoPrice  Int?
  price           Json
  location        String?
  rules           Json?

  disabled  Boolean  @default(false)
  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt
  eventId   String
  event     Event?   @relation(fields: [eventId], references: [id])

  contestants Contestant[] @relation("TournamentContestants")
}

model Contestant {
  id              Int        @id @default(autoincrement())
  playerType      PlayerType @default(INDIVIDUAL)
  equipmentSource Boolean    @default(true)
  equipmentOwned  Json?
  isVerified      Boolean    @default(false)
  usingLogo       Boolean    @default(false)
  phoneNo         String?
  logo            Bytes?
  logoUrl         String?
  optionPrice     Int        @default(0)
  contestantType  ConsType   @default(PLAYER)
  price           Int
  storeName       String?
  storeAddress    String?

  shirtSize String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tournamentId String
  tournament   Tournaments @relation(fields: [tournamentId], references: [id], name: "TournamentContestants")
}

model WebsiteView {
  id String @id @default(cuid())
  show Boolean @default(false)
  order Int
  type Int
  content Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  routeId String
  route   WebsiteRoute @relation(fields: [routeId], references: [id])
}

model WebsiteRoute {
  id String @id @default(cuid())
  path String @default("")
  url String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  views WebsiteView[]
}

enum Role {
  USER
  ADMIN
  STAKEHOLDER
  SU
}

enum ConsType {
  PLAYER
  SUPPORTER
  VOLUNTEER
  DONOR
}

enum PlayerType {
  INDIVIDUAL
  INSTITUTION
  ASSOCIATION
  BRAND
  TEAM
  ORGANIZATION
  COMPANY
  ENTITY
  GROUP
  CLUB
  CORPORATION
  PARTNERSHIP
  FIRM
  AGENCY
  GOVERNMENT
  STORE
}

enum TournamentStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}