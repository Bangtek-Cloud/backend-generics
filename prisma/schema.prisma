// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  avatar    String
  salt      String
  role      Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contestants Contestant[] 
}

model Product {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournaments {
  id              String   @id @default(cuid())
  name            String
  description     String
  prize          Json
  startDate      DateTime
  endDate        DateTime?
  status         TournamentStatus @default(UPCOMING)  
  maxParticipants Int?
  usingLogoPrice  Int?
  price          Json
  location       String?    
  rules          Json?
  disabled        Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  contestants    Contestant[] @relation("TournamentContestants")
}

model Contestant {
  id             String   @id @default(cuid())
  playerType     PlayerType @default(INDIVIDUAL)
  equipmentSource Boolean @default(true)
  isVerified     Boolean @default(false)
  usingLogo       Boolean @default(false)
  logo            String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String 

  tournaments Tournaments[] @relation("TournamentContestants")
}

enum Role {
  USER
  STAKEHOLDER
  DONOR
  ADMIN
  SU
}

enum PlayerType {
  INDIVIDUAL
  INSTITUTION
  ASSOCIATION
  STORE
}

enum TournamentStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

